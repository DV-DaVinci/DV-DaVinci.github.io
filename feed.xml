<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://dv-davinci.github.io/</id><title>Davinci Note</title><subtitle>Do Develop. Like Davinci.</subtitle> <updated>2022-04-02T22:22:00+09:00</updated> <author> <name>DV-DaVinci</name> <uri>https://dv-davinci.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://dv-davinci.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://dv-davinci.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 DV-DaVinci </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>BeanFactory vs ApplicationContext 차이점</title><link href="https://dv-davinci.github.io/posts/BeanFactory-vs-applicationContext/" rel="alternate" type="text/html" title="BeanFactory vs ApplicationContext 차이점" /><published>2022-04-02T09:46:00+09:00</published> <updated>2022-04-02T21:58:38+09:00</updated> <id>https://dv-davinci.github.io/posts/BeanFactory-vs-applicationContext/</id> <content src="https://dv-davinci.github.io/posts/BeanFactory-vs-applicationContext/" /> <author> <name>DV-DaVinci</name> </author> <category term="WEB-Backend" /> <category term="Spring" /> <summary> 간단한 실습을 통해 그 차이점을 확인할 수 있습니다. applicationContext.xml에서 IPhone과 GalaxyPhon을 만들고 id는 겹치지 않도록 설정한 뒤 PhoneUser로 가서 ‘gphone’을 lookup 해봅시다. applicationContext.xml &amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt; &amp;lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans htt... </summary> </entry> <entry><title>ApplicationContext.xml</title><link href="https://dv-davinci.github.io/posts/applicationContext/" rel="alternate" type="text/html" title="ApplicationContext.xml" /><published>2022-04-02T06:19:00+09:00</published> <updated>2022-04-02T18:34:16+09:00</updated> <id>https://dv-davinci.github.io/posts/applicationContext/</id> <content src="https://dv-davinci.github.io/posts/applicationContext/" /> <author> <name>DV-DaVinci</name> </author> <category term="WEB-Backend" /> <category term="Spring" /> <summary> IoC를 지원하는 스프링 컨테이너는 객체를 관리하는 별도의 설정파일이 필요합니다. ‘IoC 란?’ 포스팅에서 ‘서블릿 컨테이너’를 예시로 들었었습니다. 결국에는 둘 다 컨테이너기 때문에 서블릿 컨테이너에게 web.xml 파일이 있었던 것처럼 스프링 컨테이너 설정파일도 ~.xml일 것이다 라는 것을 예상해 볼 수 있습니다. applicationContext.xml 생성 Java Resource &amp;gt; src/main/resource에서 ‘Spring Bean Configuration File’로 만들어줍니다. 파일 이름은 ‘applicationContext.xml’입니다. 구조를 보면 &amp;lt;beans&amp;gt;라는 엘리먼트로 묶여있고 그 안에 각종 Namespaces(네임스페이스) ... </summary> </entry> <entry><title>Log4j Error Debugging</title><link href="https://dv-davinci.github.io/posts/Log4j-Debugging/" rel="alternate" type="text/html" title="Log4j Error Debugging" /><published>2022-04-01T09:53:00+09:00</published> <updated>2022-04-01T22:05:55+09:00</updated> <id>https://dv-davinci.github.io/posts/Log4j-Debugging/</id> <content src="https://dv-davinci.github.io/posts/Log4j-Debugging/" /> <author> <name>DV-DaVinci</name> </author> <category term="Debugging" /> <summary> 환경 Spring Tool Suite 4 Version: 4.13.1.RELEASE OS_ARCH=”x86_64” OS_NAME=”Windows” Spring MVC 생성 후 log4j.xml 에러 발생 Spring MVC 프로젝트를 생성하였는데, log4j.xml에서 빨간줄 에러가 발생했다. 해결방법 해결방법은 DOCTYPE 태그를 아래와 같이 대체했다. &amp;lt;!DOCTYPE log4j:configuration SYSTEM "http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd"&amp;gt; </summary> </entry> <entry><title>AOP(Aspect Oriented Programming)란?</title><link href="https://dv-davinci.github.io/posts/AOP/" rel="alternate" type="text/html" title="AOP(Aspect Oriented Programming)란?" /><published>2022-03-28T10:14:00+09:00</published> <updated>2022-03-28T22:48:17+09:00</updated> <id>https://dv-davinci.github.io/posts/AOP/</id> <content src="https://dv-davinci.github.io/posts/AOP/" /> <author> <name>DV-DaVinci</name> </author> <category term="WEB-Backend" /> <category term="Spring" /> <summary> AOP는 Aspect Oriented Programming(관점 지향 프로그래밍)의 줄임말입니다. 관점지향 프로그래밍의 목표는 응집도 높은 개발입니다. 결국 스프링 프레임워크는 ‘낮은 결합도’와 ‘높은 응집도’가 목표인 것입니다. 관점지향의 반댓말은 무엇일까요? Aspect Oriented Programming(AOP) Object Oriented Programming(OOP) 관점지향 프로그래밍 객체지향 프로그래밍 (ex:Java) AOP는 관점지향 프로그래밍이니까 쉽게 말해 방법론 중에 하나라고 보시면 됩니다. 핵심로직과 공통로직 프로그램마다 메소드를 사용할 때 그 메소드를 쓰는 ... </summary> </entry> <entry><title>IoC(Inversion of Control)란?</title><link href="https://dv-davinci.github.io/posts/IoC/" rel="alternate" type="text/html" title="IoC(Inversion of Control)란?" /><published>2022-03-28T09:14:00+09:00</published> <updated>2022-03-28T22:11:40+09:00</updated> <id>https://dv-davinci.github.io/posts/IoC/</id> <content src="https://dv-davinci.github.io/posts/IoC/" /> <author> <name>DV-DaVinci</name> </author> <category term="WEB-Backend" /> <category term="Spring" /> <summary> IoC는 Inversion of Control 의 줄임말입니다. Inversion of Control는 ‘제어의 역행‘이라는 뜻입니다. “IoC와 AOP를 지원하는 경량 컨테이너 프레임워크”를 다시 해석하면, 제어의 역행을 지원하는 / 일반적 형태의 객체를 생성하고 관리할 수 있는 / 컨테이너 프레임워크라고 할 수 있겠습니다. IoC의 목표 ‘제어의 역행’ 즉, IoC의 목표는 무엇일까요? 어플리케이션을 구성하는 객체들간의 느슨한 결합을 목표로 합니다. 느슨한 결합 == 낮은 결합도를 유지하는 것이 목표입니다. 결합도가 높게 되면 개발자 입장에서는 유지보수가 힘듭니다. 뭔가 꼼꼼히 결합되 있으면 하나를 고치기 위해 결합되어 있는 것들을 다 풀어야 되니 굉장히 복잡할 수 밖에 없습니다... </summary> </entry> </feed>
