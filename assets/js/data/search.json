[ { "title": "BeanFactory vs ApplicationContext 차이점", "url": "/posts/BeanFactory-vs-applicationContext/", "categories": "WEB-Backend, Spring", "tags": "Spring", "date": "2022-04-02 09:46:00 +0900", "snippet": "간단한 실습을 통해 그 차이점을 확인할 수 있습니다.applicationContext.xml에서 IPhone과 GalaxyPhon을 만들고id는 겹치지 않도록 설정한 뒤 PhoneUser로 가서 ‘gphone’을 lookup 해봅시다. applicationContext.xml&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt;\t&lt;bean class=\"coupling.IPhone\" id=\"phone\"/&gt;\t&lt;bean class=\"coupling.GalaxyPhone\" id=\"gphone\"/&gt;&lt;/beans&gt; PhoneUserpackage coupling;import org.springframework.context.support.AbstractApplicationContext;import org.springframework.context.support.GenericXmlApplicationContext;public class PhoneUser {\tpublic static void main(String[] args) {\t\tAbstractApplicationContext factory = new GenericXmlApplicationContext(\"applicationContext.xml\");\t\t\t\tPhone phone = (Phone)factory.getBean(\"gphone\");//gphone lookup\t\t\t\tphone.powerOn();\t\tphone.volumeUp();\t\t\tfactory.close();\t}} 실행결과아이폰 생성됨갤럭시 전원 ON갤럭시 소리 ++실행결과를 보면 GalaxyPhone을 요청했는데도 ‘아이폰 생성됨’이 출력된 것을 확인할 수 있습니다.BeanFactory와 ApplicationContext의 차이점을 확실히 보여주는 결과입니다.BeanFactoryBeanFacotory는 컨테이너가 실행될 때 바로 객체가 생성되는 것이 아닙니다.클라이언트가 객체를 요청했을 때 그때 객체를 생성합니다.컨테이너 동작과 객체를 만드는 행위를 완전 다른 행위라고 보는 겁니다.장점은 메모리 낭비를 하지 않을 수 있지만단점은 사용자가 해당 스탭 때 필요한 객체들을 전부 알고 있어야 한다는 것입니다.BeanFactory처럼 클라이언트가 객체를 요청했을 때 생성하는 것을 ‘지연로딩’이라고 합니다.그리고 별도의 추가기능을 지원하지 않고 개발자가 만든대로 딱 객체를 지급하는 용도 정도로만 쓰입니다.BeanFactory는 메모리를 아낄 수 있는 장점이 있지만, 그 장점을 applicationContext에서 각종 설정으로 충분히 해결할 수 있습니다.때문에 일반적으로 많이 쓰이진 않지만 필요한 부분에서 필요한 만큼 쓰이기도 합니다.ApplicationContextApplicationContext를 구현한 클래스들 중 GenericXmlApplicationContext를 선택해서 썼는데, 뭔가를 상속받았기 때문에 기능들이 다 갖춰져 있을 거라는 것을 예상할 수 있습니다.그래서 개발자가 필요한 언어처리, 트랜잭션 등 다양한 기능을 지원해줍니다.ApplicationContext는 실습에서 볼 수 있었던 것처럼 &lt;bean&gt;으로 등록한 모든 객체를 미리 생성해놓고 골라서 씁니다. 이런 것을 ‘즉시로딩’이라고 합니다.장점은 객체를 미리 다 생성해두기 때문에 사용자가 어떤게 필요한지 고르지 않아도 됩니다.단점은 한번 쓰거나, 안 쓰는 것들도 다 로드하기 때문에 메모리가 낭비되는 경향이 있습니다. 하지만 이런 단점들도 설정으로 충분히 해결할 수 있기 때문에 BeanFactory보다 많이 사용되고 있습니다.스프링 공식 문서를 찾아보니 두 컨테이너 중 특별한 이유가 없다면 ApplicationContext를 사용해야 한다고 나와있습니다.이유는 BeanFactory를 상속받았기 때문에 BeanFactory의 모든 기능을 포함하는 것은 물론이고 추가 기능들을 제공하기 때문입니다." }, { "title": "ApplicationContext.xml", "url": "/posts/applicationContext/", "categories": "WEB-Backend, Spring", "tags": "Spring, applicationContext.xml", "date": "2022-04-02 06:19:00 +0900", "snippet": "IoC를 지원하는 스프링 컨테이너는 객체를 관리하는 별도의 설정파일이 필요합니다.‘IoC 란?’ 포스팅에서 ‘서블릿 컨테이너’를 예시로 들었었습니다.결국에는 둘 다 컨테이너기 때문에 서블릿 컨테이너에게 web.xml 파일이 있었던 것처럼 스프링 컨테이너 설정파일도 ~.xml일 것이다 라는 것을 예상해 볼 수 있습니다.applicationContext.xml 생성Java Resource &gt; src/main/resource에서 ‘Spring Bean Configuration File’로 만들어줍니다.파일 이름은 ‘applicationContext.xml’입니다.구조를 보면 &lt;beans&gt;라는 엘리먼트로 묶여있고 그 안에 각종 Namespaces(네임스페이스) 관련 설정이 되어 있습니다.앞으로 이 설정파일에 &lt;bean&gt; 엘리먼트로 클래스를 등록할 수 있습니다.클래스 하나 당 하나의 &lt;bean&gt; 엘리먼트가 필요합니다.applicationContext.xml 클래스 등록기존에 간단하게 만들었던 클래스를 한번 등록해보겠습니다. IPhonepackage coupling;public class IPhone implements Phone {\tpublic void powerOn() {\t\tSystem.out.println(\"아이폰 전원 ON\");\t}\tpublic void powerOff() {\t\tSystem.out.println(\"아이폰 전원 OFF\");\t}\tpublic void volumeUp() {\t\tSystem.out.println(\"아이폰 소리 ++\");\t}\tpublic void volumeDown() {\t\tSystem.out.println(\"아이폰 소리 --\");\t}} applicationContext.xml&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt;\t&lt;bean class=\"coupling.IPhone\" id=\"phone\"/&gt;&lt;/beans&gt;&lt;bean&gt; 엘리먼트 안에 class라는 속성으로 어떤 클래스를 등록할 것인지 작성할 수 있습니다.또 id 라는 속성을 통해서 이 클래스를 뭐라고 부를건지 이름을 정해줄 수 있습니다.applicationContext.xml에 객체관리를 맡겨보자이제 이 설정파일에 객체관리를 맡겨보겠습니다. Phone Userpackage coupling;import org.springframework.context.support.AbstractApplicationContext;import org.springframework.context.support.GenericXmlApplicationContext;public class PhoneUser {\tpublic static void main(String[] args) {\t\tAbstractApplicationContext factory = new GenericXmlApplicationContext(\"applicationContext.xml\");\t\t\t\tPhone phone = (Phone)factory.getBean(\"phone\");\t\t\t\tphone.powerOn();\t\tphone.volumeUp();\t\t\tfactory.close();\t}}AbstractApplicationContext 는 앞에 붙어있는 ‘Abstract’를 보면 유추할 수 있겠지만 인터페이스입니다. 이 인터페이스를 구현한 하위의 다양한 클래스들 중 GenericXml을 만들었습니다. 여기서 factory 객체는 스프링 컨테이너를 눈으로 볼 수 있게 객체화 시킨 것입니다.실제로 많이 사용하는 것은 아니지만 동작방식을 살펴보기 위해 채택했습니다.나중에 웹개발로 본격적인 내용을 포스팅하게되면 web.xml을 사용하게 될 겁니다.applicationContext.xml에 등록했던 객체를 어떻게 불러낼까?xml에 bean으로 등록했기 때문에 getBean() 메소드를 이용해 불러낼 수 있습니다. 조금 전 xml에서 클래스의 id를 phone으로 등록했기 때문에 getBean(\"phone\")으로 명령합니다.여기서 getBean() 은 리턴타입이 Object이기 때문에 Phone 객체에 넣으려면 캐스팅을 해주어야 합니다.‘phone’ 객체가 어느 순간에 만들어질까?applicationContext.xml에 등록했던 ‘phone’ 객체가 언제 만들어지는지 확인해보기 위해 IPhone클래스에서 기본생성자를 작성해보겠습니다. IPhonepackage coupling;public class IPhone implements Phone {\t\tpublic IPhone() {\t\tSystem.out.println(\"아이폰 생성됨\");\t} //기본생성자\t\tpublic void powerOn() {\t\tSystem.out.println(\"아이폰 전원 ON\");\t}\tpublic void powerOff() {\t\tSystem.out.println(\"아이폰 전원 OFF\");\t}\tpublic void volumeUp() {\t\tSystem.out.println(\"아이폰 소리 ++\");\t}\tpublic void volumeDown() {\t\tSystem.out.println(\"아이폰 소리 --\");\t}} 실행결과아이폰 생성됨아이폰 전원 ON아이폰 소리 ++결과를 확인해보면 lookup을 하는 순간 기본생성자를 호출해서 객체를 생성하고, 만들어진 객체로 powerOn()/ volumeUp() 을 하고 있다는 것을 확인할 수 있습니다.중요한건 점점 객체를 생성, 관리하는 것을 전부 설정파일에 넘김으로써개발자가 더이상 코드개입을 하지 않을 수 있도록 하는겁니다.IPhone에서 GalaxyPhone으로 바꾸고 싶다면?이제 설정파일이 외부에 있기 때문에 갑자기 IPhone에서 GalaxyPhone으로 바꾸고 싶다면 applicationContext.xml에서 간단한 수정을 통해 해결할 수 있습니다.우선 GalaxyPhone 클래스를 만들었습니다. GalaxyPhonepackage coupling;public class GalaxyPhone implements Phone{\t@Override\tpublic void powerOn() {\t\tSystem.out.println(\"갤럭시 전원 ON\");\t}\t@Override\tpublic void powerOff() {\t\tSystem.out.println(\"갤럭시 전원 OFF\");\t}\t@Override\tpublic void volumeUp() {\t\tSystem.out.println(\"갤럭시 소리 ++\");\t}\t@Override\tpublic void volumeDown() {\t\tSystem.out.println(\"갤럭시 소리 --\");\t}} applicationContext.xml 수정&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt;\t&lt;bean class=\"coupling.GalaxyPhone\" id=\"phone\"/&gt;&lt;/beans&gt;class 속성에서 IPhone을 GalaxyPhone으로 수정했습니다. 실행결과갤럭시 전원 ON갤럭시 소리 ++코드를 하나도 고치지 않고 설정만 변경했을 뿐인데 유지보수가 한층 더 용이해졌습니다." }, { "title": "Log4j Error Debugging", "url": "/posts/Log4j-Debugging/", "categories": "Debugging", "tags": "Spring, Log4j", "date": "2022-04-01 09:53:00 +0900", "snippet": " 환경 Spring Tool Suite 4 Version: 4.13.1.RELEASE OS_ARCH=”x86_64” OS_NAME=”Windows” Spring MVC 생성 후 log4j.xml 에러 발생Spring MVC 프로젝트를 생성하였는데, log4j.xml에서 빨간줄 에러가 발생했다.해결방법해결방법은 DOCTYPE 태그를 아래와 같이 대체했다.&lt;!DOCTYPE log4j:configuration SYSTEM \"http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd\"&gt;" }, { "title": "AOP(Aspect Oriented Programming)란?", "url": "/posts/AOP/", "categories": "WEB-Backend, Spring", "tags": "Spring, AOP", "date": "2022-03-28 10:14:00 +0900", "snippet": "AOP는 Aspect Oriented Programming(관점 지향 프로그래밍)의 줄임말입니다.관점지향 프로그래밍의 목표는 응집도 높은 개발입니다.결국 스프링 프레임워크는 ‘낮은 결합도’와 ‘높은 응집도’가 목표인 것입니다.관점지향의 반댓말은 무엇일까요? Aspect Oriented Programming(AOP) Object Oriented Programming(OOP) 관점지향 프로그래밍 객체지향 프로그래밍 (ex:Java) AOP는 관점지향 프로그래밍이니까 쉽게 말해 방법론 중에 하나라고 보시면 됩니다.핵심로직과 공통로직프로그램마다 메소드를 사용할 때 그 메소드를 쓰는 이유가 있습니다.add라고 하면 뭔가 데이터를 넣기 위한 거고, remove를 하면 뭔가 데이터를 삭제하기 위한 거고이런 것들을 메서드의 핵심로직이라고 이야기합니다.메서드마다 핵심 로직이 있는데 쓰다보면 각 로직마다 반복등장하는 공통 로직(횡단관심)이 있습니다.예를 들면,구매, 댓글쓰기, 글쓰기 등 이런것들을 핵심로직, 핵심관심이라고 이야기합니다.보안, 로그인(인증), 트랜잭션, 로깅처리 등을 공통로직, 횡단관심이라고 이야기합니다.이런 공통로직을 핵심로직에서 분리해서 관점지향적으로 코딩을 하겠단 이야기입니다.공통으로 사용하는 기능(횡단관심)들을 독립된 클래스로 분리하고 이 기능을 사용할 때 프로그램 코드에 직접 작성하지 않고 컨테이너에게 맡기는 것입니다.이런 것들을 선언적 처리라고 합니다. “이거 할거야”라고 설정파일에 알려주는 것입니다.코드에 작성하지 않았기 때문에 코드 변경이 없습니다. 이런 걸 높은 응집도라고 합니다.결론적으로 유지보수성이 좋아집니다." }, { "title": "IoC(Inversion of Control)란?", "url": "/posts/IoC/", "categories": "WEB-Backend, Spring", "tags": "Spring, IoC", "date": "2022-03-28 09:14:00 +0900", "snippet": "IoC는 Inversion of Control 의 줄임말입니다.Inversion of Control는 ‘제어의 역행‘이라는 뜻입니다.“IoC와 AOP를 지원하는 경량 컨테이너 프레임워크”를 다시 해석하면,제어의 역행을 지원하는 / 일반적 형태의 객체를 생성하고 관리할 수 있는 / 컨테이너 프레임워크라고 할 수 있겠습니다.IoC의 목표‘제어의 역행’ 즉, IoC의 목표는 무엇일까요?어플리케이션을 구성하는 객체들간의 느슨한 결합을 목표로 합니다.느슨한 결합 == 낮은 결합도를 유지하는 것이 목표입니다.결합도가 높게 되면 개발자 입장에서는 유지보수가 힘듭니다.뭔가 꼼꼼히 결합되 있으면 하나를 고치기 위해 결합되어 있는 것들을 다 풀어야 되니 굉장히 복잡할 수 밖에 없습니다.원래 의존관계에 있는 객체를 변경할 때 소스코드(자바코드)를 수정해야하지만,IoC를 적용하게 되면 객체 생성을 소스코드로 처리하지 않고 컨테이너가 대신 판단하여 처리합니다.결론IoC를 적용하면 객체 생성을 컨테이너가 대신 판단하기 때문에 개발자가 처리해야 할 소스코드가 없습니다.즉, 소스코드의 결합도가 낮아졌기 때문에 유지보수가 편리해집니다.개발자의 코드 개입을 줄여가는 것이 목표라고 볼 수 있습니다.어떻게 결합도를 낮출 수 있나?서블릿 컨테이너로 예시를 들어보겠습니다.사용자 --web.xml--&gt; 톰캣 -&gt; Dispatcher , 서블릿(Controller) -&gt; View(jsp)사용자가 톰캣을 실행시킬때, 매핑된 서블릿이 있는지 확인해야하기 때문에 web.xml을 보게됩니다.web.xml을 본다는 얘기는 뭔가 설정파일을 본다고 해석해서 보면 됩니다.사용자가 톰캣을 구동시킬때 서블릿 컨테이너는 뭔가 설정사항이 있는지 참고하여 프로그램을 돌리게 된다는 겁니다.Dispatcher는 .do / .mem / .jsp 에 대하여 각각 알맞는 Controller로 지시를 하게 되고,일을 끝내고 다시 Dispatcher로 돌아오면 포워딩해서 View단으로 화면을 넘겨줍니다.이때 우리의 목표는? 결합도를 낮추는 것입니다.즉 소스코드를 손 안대는게 목표입니다. == 수정되는 코드를 줄이는 게 목표입니다.어떻게 수정되는 코드를 줄일 수 있을까요?우선 객체 생성을 컨테이너가 대신 판단하고 처리하게 해야 합니다.톰캣 서블릿 컨테이너가 판단하게 하기 위해 web.xml 파일을 뒀었던 것처럼마찬가지로 xml파일을 하나 둬서 컨테이너가 대신 판단하게 할 수 있습니다.이때 xml 파일에 DI(Dependency Injection) : 의존성 주입 을 해야 합니다.더 들어가보겠습니다.사용자 --web.xml--&gt; 톰캣 -&gt; Dispatcher , 서블릿(Controller) -&gt; View(jsp)UI(User Interface) --&gt; Service --&gt; DAO --&gt; DBUI에서 유저가 뭔가 서비스를 이용하면 DAO에 들어가게되고, DAO가 DB를 건드려서 원하는 결과를 가져와서 다시 유저에게 보여주게됩니다.이 과정에서 Controller에 만약 A1 a = new A1(); 이 있었는데 객체가 A2로 수정이 됐다고 가정해봅시다.A1 a = new A1();A2 a = new A2();그렇다면 이렇게 변경해서 써야합니다. 이게 원래 방식입니다.그런데 이렇게 코드를 변경하면 실수를 할 수도 있고 용이하지 않기 때문에A a = new A1();이렇게 한번 써볼까? 까지 생각하게 됩니다.A a부분은 바꿀 필요가 없게 된 겁니다.이럴 때 필요한게 Interface 개념입니다.A1과 A2를 모두 다 가지고 있어야 하는 A인 겁니다.이제 앞으로A a = new A1();뒷부분에 new A1()을 넣을지, new A2()를 넣을지 컨테이너가 대신 판단하게 하게 할 겁니다.그러기 위해서 설정파일 .xml 이나 혹은 Annotation(어노테이션)을 이용해서 객체 생성을 외부에서 설정하게 할 것입니다.(객체 생성을 외부에서 설정하겠다 == DI를 하겠다 == 의존성 주입하겠다)최종정리스프링 프레임워크는 일반적인 형태의 객체를 생성하고 관리할 수 있는 일종의 컨테이너 프레임 워크입니다. 뭐를 지원하는? 제어의 역행을 지원하는.제어의 역행이라는 말은 어려우니까, 낮은 결합도를 유지할 수 있게 도와주는 것이라고 이해합시다.이 말의 뜻은 개발자가 직접 객체 생성을 작성하거나 변경하는게 아니라.xml이나 외부 어노테이션으로 컨테이너가 대신 판단하고 처리 하게 하겠다는 겁니다.이러한 개념을 DI(Dependency Injection), 의존성 주입 이라고 합니다." }, { "title": "스프링 프레임워크(Spring Framework)란?", "url": "/posts/Spring-Framework/", "categories": "WEB-Backend, Spring", "tags": "Spring, Spring framework", "date": "2022-03-28 07:31:00 +0900", "snippet": "스프링 프레임워크는 한마디로 이렇게 정리할 수 있습니다.“IoC와 AOP를 지원하는 경량 컨테이너 프레임워크”이게 스프링 프레임워크의 핵심적인 내용이라고 볼 수 있습니다.먼저, 단어들을 간략하게 하나씩 설명해보겠습니다.경량경량 : POJO 형태의 객체를 관리할 수 있다.→ Plain Old Java Object 의 약자.직독직해를 하면 옛날 기본적인 자바 오브젝트라는 것인데, 일반적인 객체를 의미합니다.이렇게 하면 이해가 어려우니 POJO가 아닌 것을 가져와서 비교하며 설명해보겠습니다.일반적인 객체 ↔ Servlet 클래스 (POJO가 아닌 것)Servlet 클래스를 만들 때는 요구하는 규칙이 있고, 그거에 알맞게 만들어야 합니다.Servlet클래스를 만들면 기본적으로 httpServlet을 상속(extends)받아 만들어야 되고, 상속받아 만들다보니 import를 할 것이 한 두가지가 아닙니다. 또 기본생성자가 있어야합니다. 생명주기나 혹은 doGet, doPost에 따른 메소드를 오버라이딩(재정의)해야만 합니다. 상속으로 인해 규제가 된 것입니다.이런 것들이 일반적인 POJO는 아니라고 볼 수 있습니다.다시말해, POJO 형태는 특별한 규칙이 없고 단순한 객체들을 관리할 수 있다는 겁니다.컨테이너컨테이너(Container) : 객체의 생성을 관리→ 서버 안에 들어가서 구동이 되는 것, 예를 들어 톰캣도 여기 포함됩니다.톰캣이 서블릿 ‘컨테이너’입니다. 스프링 프레임워크도 ‘경량 컨테이너’라고 했으니까 스프링 또한 일종의 컨테이너라고 볼 수 있습니다.여기까지 다시 붙여서 정리하면,‘경량 컨테이너 프레임워크’→ 일반적인 POJO형태의 객체를 생성해서 관리할 수 있는 컨테이너, 그것이 바로 스프링 프레임워크입니다.IoC와 AOP를 지원하는근데 무엇을 지원 컨테이너다? IoC와 AOP라는 것을 지원하는 컨테이너다! 라는 겁니다." }, { "title": "프레임워크(Framework)란?", "url": "/posts/Framework/", "categories": "WEB-Backend, Spring", "tags": "Spring, framework", "date": "2022-03-28 07:31:00 +0900", "snippet": "프레임워크란 어떤 걸까요?하나의 거대한 뼈대, 틀이다라고 생각하시면 되겠습니다!예를 들어, ArrayList는 왜 쓸까요? 기능이 많기 때문입니다.즉, 직접 만들지 않아도 된다는 말이기도 합니다.다른 말로 하면 쓸 수 있는 메소드가 ‘약속‘됐다는 말이기도 합니다.→ 구지 많은 말을 하지 않고도 개발자들끼리 서로 약속을 해서 개발을 더 ‘용이’하게 더 나아가 가장 중요한 ‘일관성’, ‘유지보수’를 손쉽게 도와준다!즉, 스프링 프레임워크는 어플리케이션의 구조를 결정할 수 있는 뼈대코드를 제공합니다.프레임워크가 왜 필요할까?하나의 재밌는 가정을 해봅시다.1번 개발자의 경우 리모컨의 볼륨을 1씩 올리는 것으로 개발을 합니다.2번 개발자의 경우 리모컨의 볼륨을 10씩 올리는 것으로 개발을 합니다.그 후, 1번 개발자는 퇴사를 하게 됩니다.누군가 1번 개발자가 만든 리모컨을 쓰다가 유지보수를 신청하게 됩니다.2번 개발자가 보수를 맡게 되고, 볼륨을 1씩 올리던 리모컨이 10씩 올리는 것으로 소비자에게 돌아옵니다.이런 경우가 발생하면 안 되겠지요?여기서도 알 수 있듯이 개발과정에서는 사실상 이 뼈대를 제공하는 것보다도 속 안에 있는 것들이 유지보수되는 과정에서 망가질 수 있기 때문에 이런 것들도 잘 규정해 줄 수 있는 프레임워크가 더 각광받습니다.그리고 그게 스프링 프레임워크입니다.→ 유지보수 과정에서 구조의 변형이 일어나지 않게 일관성을 유지하는데 도움을 준다!더 나아가 좀 더 디테일한 규제가 들어가기 때문에 개발자들의 역량이 획일화가 됩니다.때문에 인력에 대한 절감을 할 수 있고 개발자들이 비즈니스 로직에 좀 더 집중할 수 있게 됩니다." }, { "title": "Pom.xml 초기 설정", "url": "/posts/Pom-Xml/", "categories": "WindowOS, STS4", "tags": "setting", "date": "2022-03-28 06:31:00 +0900", "snippet": " 환경 Spring Tool Suite 4 Version: 4.13.1.RELEASE OS_ARCH=”x86_64” OS_NAME=”Windows” Spring Legacy Project를 시작하기 전, pom.xml을 버전에 맞게 세팅해야 합니다.Pom.xmlSpring Legacy Project를 생성하고 제일 하단에 있는 pom.xml에 들어갑니다.&lt;properties&gt;&lt;/properties&gt; 에 보시면 디폴트로 자바1.6과 3.1.1.RELEASE가 세팅되어 있을 겁니다.https://mvnrepository.com/ 에 접속하여 spring을 검색하고, Spring Context에 들어갑니다.가장 최신 버전이 5.2.19 RELEASE 라는 것을 확인했습니다.저는Java 11을 사용중이므로 &lt;java-version&gt;을 11로 변경하고,&lt;org.springframework-version&gt;은 5.2.19.RELEASE로 변경하도록 하겠습니다.Project Facets프로젝트 우클릭 &gt; Properties &gt; Project Facets 으로 들어가서Java 11로 세팅하고, 좌측 Runtimes탭에서 현재 Apache Tomcat을 체크한 후 Apply and Close합니다.(중간에 아파치를 삭제하고 다시 연결했더니 두개가 생겼네요;)" }, { "title": "GitHub Pages C", "url": "/posts/GitHub-Pages-C/", "categories": "Git, Pages", "tags": "Git, Pages", "date": "2022-03-27 09:03:00 +0900", "snippet": " 환경 git version 2.35.1.windows.2 ruby 3.1.1p18 (2022-02-18 revision 53f5fc4236) [x64-mingw-ucrt] Window11 / 64bit 운영체제 FaviconFavicon은 웹 브라우저의 주소창에 표시되는 웹사이트나 웹페이지를 대표하는 아이콘입니다. 작성자가 사용중인 ‘Chirpy’ 테마는 디폴트 Favicon이 수박을 먹고 있는 개미로 설정되어 있습니다.작성자는 블로그 컨셉에 맞게 Favicon을 교체했습니다.Generate Favicon‘Chirpy’ wiki의 Favicon(https://chirpy.cotes.page/posts/customize-the-favicon/)에서 추천하고 있는 ‘Real favicon generator(https://realfavicongenerator.net)’를 사용해 간단히 생성할 수 있습니다.‘Select your Favicon image’를 클릭하여 Favicon image를 첨부합니다.Favicon Generator Options에서 화면과 같이 체크하고, Pages의 favicon 디렉토리 경로를 입력합니다. 입력 후, 아래 Generate your Favicons and HTML code 버튼을 클릭합니다.Favicon package를 다운로드하고 기존의 Favicon 디렉토리에 대치한 후 Push 합니다.Safari 대응 HTML 삽입 ‘Chirpy’ 테마의 경우 Safari에 대응하는 HTML이 없어, Safari에서는 Favicon 적용이 안 될 수 있습니다. 때문에 _includes/favicon.html에 Safari 관련 코드를 삽입해야 합니다.Inatall your favicon에서 safari 관련 코드를 복사합니다._includes/favicon.html에 Safari 관련 코드를 삽입합니다.Push하기 전, safari 해당 파일이 Pages favicon 디렉토리에 있는지 확인합니다.Comment BoxJekyll 기반의 블로그의 대부분은 Disqus를 사용하는 것 같습니다.그러나 Disqus는 무겁고, 무료 라이센스로 사용하는 경우 광고가 붙어 미관상 좋지 않습니다.그래서 다른 대안을 찾던 중 utterances 라는 대체제를 찾을 수 있었습니다.utterancesutterances는 상대적으로 가볍고, GitHub Repository의 Issue를 이용하기 때문에, 메일로 댓글 알림을 받을 수 있다는 장점이 있습니다.Create Repository작성자는 깔끔하게 관리하고 싶어서 댓글용 Repository를 추가로 생성했습니다.Install utterancehttps://github.com/apps/utterances로 접속합니다.Install 버튼을 누릅니다.Install 후 작성자는 지정된 공간에서 관리하고자 따로 Comments Repo를 생성했기 때문에, ‘Only select repositories’를 선택했습니다.https://utteranc.es/ 로 접속 후, Configuration의 Repository의 repo: 에GitHub Name/Repo Name을 입력합니다.댓글 이슈를 댓글 달린 블로그 페이지의 어떤 부분과 매핑시킬지 key를 결정합니다.매핑시키는 것이기 때문에 key가 달라지면 Value는 사라질겁니다.때문에 수정을 할 일이 거의 없는 pathname을 선택하는 것이 좋겠습니다.Theme 에서 utterances의 테마를 설정합니다. 저는 GitHub Dark를 선택했습니다. 이후 Enable Utterances 코드를 Copy 합니다.Set_layouts/post.html 맨 하단에 복사+붙이기 한 후 Push 합니다.Search Engine OptimizationSEO는 검색엔진 최적화, 즉 검색엔진에서 찾기 쉽도록 사이트를 개선하는 프로세스입니다.작성자는 해외 개발자들과도 소통하는 것을 목표로 하고 있어 해외 접근성이 좋은 Google에서 진행하겠습니다.Google Search ConsoleGoogle Search Console(https://search.google.com/search-console/about) 로 접속합니다.‘시작하기’를 클릭하면 URL 접두어를 선택한 뒤, 자신의 Pages의 주소를 입력합니다.다음의 HTML파일을 다운로드 합니다.다운로드한 html 파일을 Pages 디렉토리에 배치한 후 Push 합니다.Push가 완료되면 소유권 확인이 가능합니다.Sitemap.xmlsitemap.xml은 크롤러가 웹 사이트 색인을 잘할 수 있도록 하는 일종의 지도입니다.저는 직접 작성하기 보다 자동생성 사이트를 이용하겠습니다.https://www.xml-sitemaps.com로 접속합니다.검색창에 Pages 주소를 입력하고 Start 합니다.진행이 완료되면, View Sitemap Details 를 클립합니다.Download your XML Sitemap file을 클릭합니다.이후 다운로드 받은 XML 파일을 Pages 디렉토리로 이동해줍니다.robots.txtPages 디렉토리에 robots.txt 파일을 생성한 후, 아래 양식대로 작성합니다.User-agent: GooglebotDisallow: /nogooglebot/User-agent: *Allow: /Sitemap: http://www.example.com/sitemap.xmlCheck&lt;Pages주소&gt;/sitemap.xml로 접속하여 확인해봅니다.Add SitemapGoogle Search Console 사이드바의 Sitemap을 클릭하고 sitemap.xml을 입력하고 제출합니다.이후 크롤링 완료까지 ‘가져올 수 없음’ 상태가 표시됩니다.오류는 아니니 걱정하지 않아도 됩니다.길게는 약 하루정도 소요됩니다." }, { "title": "GitHub Pages B", "url": "/posts/GitHub-Pages-B/", "categories": "Git, Pages", "tags": "Git, Pages", "date": "2022-03-27 06:10:00 +0900", "snippet": " 환경 git version 2.35.1.windows.2 ruby 3.1.1p18 (2022-02-18 revision 53f5fc4236) [x64-mingw-ucrt] Window11 / 64bit 운영체제 Tools/init.shGitHub Pages A에서 Jekyll serve를 통해 로컬 서버에서 구동한 Page는 Chirpy의 소개 페이지 입니다.커스텀을 하기 위해서는 기본 컨텐츠를 지워야 합니다.Git Bash를 켜서 cd 명령어로 Pages 디렉토리로 이동 후, 아래 명령어를 적어줍니다. (MacOS는 Terminal을 사용합니다.)$ bash tools/init.sh다시 로컬 서버를 가동시키면 기본 컨텐츠가 사라집니다._Config.yml# The Site Configuration# Import the themetheme: jekyll-theme-chirpy # import하는 테마 명, 수정 X # 사용자 페이지를 만들었을 경우, 빈칸으로 둡니다. 프로젝트 페이지를 만들었을 경우에만 프로젝트 명을 적어줍니다.# 저는 사용자 페이지를 만들었기 때문에 빈칸으로 두겠습니다. baseurl: ''# 사용하는 언어 설정을 진행합니다. http://www.lingoes.net/en/translator/langcode.htm 로 접속하여 확인이 가능합니다.lang: en# 날짜/시간 현지화를 위한 추가 매개변수, 선택사항. › https://github.com/iamkun/dayjs/tree/dev/src/locale# 이것도 빈칸으로 둡니다.prefer_datetime_locale:# timezone을 설정합니다. › http://www.timezoneconverter.com/cgi-bin/findzone/findzonetimezone: Asia/Seoul# jekyll-seo-tag settings › https://github.com/jekyll/jekyll-seo-tag/blob/master/docs/usage.md# ↓ --------------------------title: Davinci Note # 블로그 이름입니다.tagline: DV-DaVinci's Blog. # 서브 타이틀입니다.description: &gt;- # 블로그 설명입니다. Do Develop. Like Davinci.#'https://username.github.io'와 같이 설정합니다.url: 'https://dv-davinci.github.io'github: username: DV-Davinci # 본인의 GitHub username을 적습니다.twitter: username: DavinciWdv # 본인의 twitter username을 적습니다.social: # Change to your full name. # It will be displayed as the default author of the posts and the copyright owner in the Footer name: DV-DaVinci email: wdvdavinci@gmail.com # change to your email address links: # The first element serves as the copyright owner's link - https://twitter.com/DavinciWdv # change to your twitter homepage - https://github.com/DV-DaVinci # change to your github homepage # Uncomment below to add more social links # - https://www.facebook.com/username # - https://www.linkedin.com/in/username# 상단은 social 관련 내용입니다. 본인의 이름, 이메일, 링크 등을 작성합니다. 저는 깃허브와 트위터만 올렸습니다.google_site_verification: # Google Search Console 관련 내용입니다. # ↑ --------------------------# The end of `jekyll-seo-tag` settingsgoogle_analytics: id: # Google Analytics ID입니다. # Google Analytics pageviews report settings pv: proxy_endpoint: # fill in the Google Analytics superProxy endpoint of Google App Engine cache_path: # the local PV cache data, friendly to visitors from GFW regiontheme_mode: dark ## chirpy테마는 [light|dark]테마를 지원합니다. 저는 dark로 했습니다. img_cdn: #cdn 이미지 설정입니다. 저는 빈칸으로 두었습니다. # 대표 이미지입니다. avatar: /assets/img/Avatar/Avatar.jpg# toc(Table of contents)입니다. 블로그를 보다보면 포스팅 우측에 스크롤을 따라오는 목차입니다.# 사용하려면 true, 아니라면 false를 적으면 됩니다.toc: true#--------------이후 내용은 건들지 않았으므로 생략합니다.---------------⚠️Error Gemfile.lock‘Chirpy’ 테마는 현재 시점에서 Push를 하면 _Config.xml이 제대로 적용되지 않습니다.여러번 같은 과정을 반복하며 분석해본 결과 tools/init.sh 명령이 .gitignore에 있는 Gemfile.lock을 삭제시킨다는 사실을 발견했습니다.이후 Gemfile.lock 파일을 아예 삭제한 후 Push를 하니 정상적으로 반영되었습니다. Local ServerGemfile.lock을 삭제하면 local server 에서 구동이 불가합니다. 때문에 삭제보다는 .gitignore에 Gemfile.lock 추가를 권장합니다.작성자는 수정사항이 있다면 VS Code로 고치고 GitHub Desktop으로 Push 하는 형식으로 포스팅을 올리고 있어서 local server 구동 없이도 별다른 어려움 없이 포스팅을 하고 있습니다.PushPush 한 후, GitHub 의 Actions 탭을 확인하면 페이지 반영 결과를 확인할 수 있습니다." }, { "title": "GitHub Pages A", "url": "/posts/GitHub-Pages-A/", "categories": "Git, Pages", "tags": "Git, Pages", "date": "2022-03-27 04:15:00 +0900", "snippet": " 환경 git version 2.35.1.windows.2 ruby 3.1.1p18 (2022-02-18 revision 53f5fc4236) [x64-mingw-ucrt] Window11 / 64bit 운영체제 GitHub 블로그를 시작한 이유개발자에게 포트폴리오는 굉장히 중요한 요소입니다. 작성자는 지나온 족적과 앞으로의 활동을 기록하는 공간으로 네이버 블로그를 이용했었습니다. 그런데 얼마 전부터 구글링을 할 때마다 주소창에 ‘github.io’ 라는 문구를 접하게 됐습니다.‘github’는 기존에 STS4로 프로젝트를 진행하면서 기록용으로 많이 이용을 해왔었지만, github로 블로그를 만들 수 있다는 사실은 이로써 처음 알게 되었습니다.Naver 블로그에서 GitHub 블로그로github.io란 무엇인지 구글링을 통해 조사한 결과 블로그 이사를 결심했습니다.GitHub와 연동되어 커밋기록을 남길 수 있다는 점과 커스터마이징 기능이 상당히 매력적이었고, 향후 캐나다 취업을 목표로 하고 있기 때문에 네이버 블로그보다 해외 유입 접근성이 용이하다는 측면에서도 좋다고 느꼈습니다.Install RubyJekyll 테마를 이용하여 github pages를 만들것이기 때문에 Ruby와 Jekyll을 다운해야 합니다.Jekyll이 Ruby로 만들어졌기 때문에 Jekyll 설치 전, Ruby를 먼저 설치합니다.WindowOS : https://dv-davinci.github.io/posts/Install-Ruby/MacOS : https://dv-davinci.github.io/posts/Ruby-on-MacOS/Install JekyllMacOS는 Terminal, WindowOS는 Ruby 프롬포트를 사용합니다.아래 명령을 입력합니다.gem install Jekyll bundlerJekyll 설치 확인Jekyll -v를 입력해 설치를 확인합니다.Jekyll Theme지킬 테마는 http://jekyllthemes.org 에서 원하는 테마를 선택할 수 있습니다.작성자는 목차가 직관적이고 가독성이 좋은 https://github.com/cotes2020/jekyll-theme-chirpy 를 선택했습니다.테마 선택 후 압축파일을 다운하는 방법도 있지만 GitHub를 사용하겠습니다.Forkhttps://github.com/cotes2020/jekyll-theme-chirpy 로 이동해서 좌측상단의 Fork를 클릭합니다.Fork된 모습입니다.Repository name 수정Repo의 이름을 아래의 형식으로 수정합니다.&lt;GitHubName&gt;.github.ioEx: DV-DaVinci.github.ioCloneGitHub의 Repository를 Clone합니다. 저는 GitHub Desktop을 사용합니다.GitHub Desktop 다운 : https://desktop.github.com/저는 path를 원하는 대로 수정한 후 Clone 했습니다.GitHub Pages가 Clone 된 모습입니다.조금 전 path에 파일이 생성되었습니다.Connect Local ServerRuby 프롬포트를 킵니다.cd 명령어를 통해 page 저장소로 이동 후 bundle install을 입력해 의존성 모듈을 설치합니다.설치가 완료되면 jekyll serve를 입력해 local server를 구동합니다.Server adress로 접속해보면 테마가 적용된 Page를 확인할 수 있습니다.Command+C 혹은 Ctrl + C를 누르면 Server를 종료할 수 있습니다." }, { "title": "Ruby on MacOS", "url": "/posts/Ruby-on-MacOS/", "categories": "MacOS, Ruby on MacOS", "tags": "setting", "date": "2022-03-19 08:48:00 +0900", "snippet": "MacOS는 기본적으로 ruby가 아래 위치에 기본적으로 설치되어 있습니다./System/Library/Frameworks/Ruby.framework/Versions/MacOS Catalina 버전 10.15 부터 위 기능은 더이상 활성화 되지 않습니다.아마 나중에는 삭제될 가능성도 있습니다.Rbenv는 루비 버전 관리자입니다. 때문에, 여러 버전의 ruby 를 사용할 수 있습니다.Rbenv는 사용자 디렉토리 아래에 설치되고 ( ~/.rbenv ), 설치된 루비 버전은 아래 위치에 설치됩니다.(~/.rbenv/versions) 환경 MacBook Pro(Intel Core) Monterey OS(Version 12.2.1) git version 2.32.0(Apple Git-132) First clone rbenv터미널에 아래 명령을 입력합니다.git clone https://github.com/rbenv/rbenv.git ~/.rbenvThe executecd ~/.rbenv &amp;&amp; src/configure &amp;&amp; make -C src macOS가 catalina 이전이라면 아래 명령을 입력합니다.echo 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' &gt;&gt; ~/.bash_profile macOS가 catalina 이상이라면 아래 명령을 입력합니다.echo 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' &gt;&gt; ~/.zshrcExecute~/.rbenv/bin/rbenv initOpen Nano editor나노 에디터를 실행합니다. 기본 쉘이 Bash인 경우. (일반적으로 Catalina 이전의 MacOS 버전에 해당됩니다)nano ~/.bash_profilerbenv를 자동로드하려면 다음을 추가합니다.eval \"$(rbenv init -)\"ctrl-x, 저장하고 종료합니다. 기본 쉘이 zsh 인 경우. (일반적으로 MacOS Catalina 및 그 이후에 해당됩니다)nano ~/.zshrcrbenv를 자동로드하려면 다음을 추가합니다.eval \"$(rbenv init - zsh)\"ctrl-x, 저장하고 종료합니다.Execute 기본 쉘이 Bash인 경우. (일반적으로 Catalina 이전의 MacOS 버전에 해당됩니다)source ~/.bash_profile 기본 쉘이 zsh 인 경우. (일반적으로 MacOS Catalina 및 그 이후에 해당됩니다)source ~/.zshrcruby build 설치(Install ruby build , to install ,versions of ruby)mkdir -p \"$(rbenv root)\"/pluginsgit clone https://github.com/rbenv/ruby-build.git \"$(rbenv root)\"/plugins/ruby-buildrbenv 설치 확인(Verify rbenv has been installed correctly)curl -fsSL https://github.com/rbenv/rbenv-installer/raw/main/bin/rbenv-doctor | bash최신 안정 릴리즈 표시(Show the lastest stable releases)rbenv install --listInstall Rubyrbenv install &lt;Version&gt;rbenv rehashrbenv rehash버전 확인(rbenv)rbenv versions전역 설정rbenv global &lt;Version&gt;버전 확인(Ruby)ruby -v" }, { "title": "Install Ruby", "url": "/posts/Install-Ruby/", "categories": "WindowOS, Ruby", "tags": "setting", "date": "2022-03-19 07:26:00 +0900", "snippet": "Window에서 Ruby 설치 방법입니다. Jekyll이 Ruby로 만들어져 있어서 Jekyll설치 전, 먼저 설치하도록 하겠습니다. 환경 ruby 3.1.1p18 (2022-02-18 revision 53f5fc4236) [x64-mingw-ucrt] Window11 / 64bit 운영체제 Ruby Downloadhttps://rubyinstaller.org/downloads/ 로 들어가서 Ruby+Devkit 3.1.1-1 (x64)를 다운합니다.설치 파일 실행 후 라이센스 동의라이센스 동의 후 Next 합니다.Installation Destination and Optional Tasks원하는 경로를 지정하고 Next 합니다.Select Components그대로 Next 합니다.Installing설치 완료Finish를 클릭합니다.RubyInstaller2잠시 후, CMD창이 실행되면서 다음과 같은 화면이 나옵니다.1,2,3 을 차례로 설치를 해줍니다.설치된 Ruby Version 확인하기cmd 창을 열어 ruby -v 를 입력합니다.ruby -v다음과 같은 결과를 얻을 수 있습니다.ruby 3.1.1p18 (2022-02-18 revision 53f5fc4236) [x64-mingw-ucrt]" }, { "title": "Git Setting", "url": "/posts/Git-Setting/", "categories": "Git, git", "tags": "setting", "date": "2022-03-19 05:53:00 +0900", "snippet": " git 설치 후 setting 방법입니다. 환경 git version 2.35.1.windows.2 Window11 / 64bit 운영체제 Git Bash 실행사용자 이름 / 이메일 등록git config --global user.name \"사용자이름\"git config --global user.email \"이메일@abc.com\"등록된 사용자 확인git config --list" }, { "title": "Install Git", "url": "/posts/Install-Git/", "categories": "Git, git", "tags": "setting", "date": "2022-03-19 04:54:00 +0900", "snippet": "Window에서 Git을 설치하는 방법입니다. git을 사용하려면 git 회원가입이 필요합니다. 회원가입은 https://github.com/ 에서 간단히 가능합니다. git 설치 시 Visual Studio Code를 기본 에디터로 선택할 것입니다. (VS code가 없는 분들은 미리 설치 하시기 바랍니다.) 환경 git version 2.35.1.windows.2 Window11 / 64bit 운영체제 Downloadhttps://git-scm.com/ 으로 들어가서 Downloads에서 본인의 환경에 맞는 것을 다운합니다.(저는 Standalone Installer &gt; 64-bit Git for Windows Setup을 다운했습니다.)Install다운 후 설치를 진행합니다.Git Setup 프롬포트 진행Next를 눌러 진행합니다.Select Destination Location저는 Depth가 깊은 것을 안 좋아해서 C 드라이브에 지정된 폴더로 설정했습니다.Select Components기본 상태 그대로 진행해도 무방합니다만, 원한다면 같이 설치되는 구성 요소를 선택합니다. 옵션 Additional icons, On the Desktop : 바탕화면에 바로가기 아이콘 추가 Windows Explorer intergration Git Bash Here : Git Bash 연결 기능 Git GUI Here : Git GUI 연결 기능 Git LFS(Large File Support): 용량이 큰 파일 지원 여부 Associate .git Configuration files with the default text editor : Git 구성 파일을 기본 텍스트 편집기와 연결할지 여부 Associate .sh files to be run with Bash : .sh 확장자 파일을 Bash와 연결할지 선택 Check daily for Git for Windows updates : Git 업데이트를 매일 체크할지 여부 Add a Git Bash Profile to Windows Terminal: 윈도우 터미널에 Git Bash를 추가 Select Start Menu Folder시작 폴더 경로를 지정 후 Next를 눌러 진행합니다.(Don’t create a Start Menu folder 선택 박스를 체크하면 추가 되지 않습니다.)Choosing the default editor used by GitGit의 기본 에디터를 선택 후 Next를 눌러 진행합니다.저는 VSCode를 자주 사용하므로 VSCode를 선택 후 Next 했습니다.Adjusting the name of the initial branch in new repositories새 Repository를 생성할 때 initial branch 이름을 지정하는 방법을 선택 후 Next 합니다. (Let Git decide를 선택 후 Next)✅Let Git decide : 새로운 Repository의 initial branch에 기본 분기 이름(”master”)를 사용합니다.Override the default branch name for new repositories : 새로운 Repository의 initial branch에 사용자 지정 분기 이름을 사용합니다. 이미 팀에서 관용적으로 쓰는 명칭이 있을 때 사용하면 됩니다.Adjusting your PATH environmentGit 커맨드를 사용하기 위한 환경변수를 설정하고 Next 합니다.Use Git from Git Bash only : Git Bash에서만 Git 명령어를 수행할 수 있습니다.✅ Git from the command line and also from 3rd-party software : Git 환경변수(PATH)에 추가하여 윈도우 기본 명령 프롬포트(CMD) 등 에서도 Git 명령어를 수행할 수 있습니다.Use Git and optional Unix tools from the Command Prompt : Git과 Unix 도구 모두 환경변수(PATH)에 추가합니다.Choosing the SSH executableSSH 실행 도구를 선택하고 Next 합니다.✅ Use bundled OpenSHH : Git에서 기본으로 제공되는 OpenSSH를 사용합니다.Use external OpenSSH : 외부 OpenSHH를 사용합니다. 이 경우 Git에서 기본 제공하는 OpenSSH는 따로 설치되지 않으며 PATH에 명시된 OpenSSH를 사용합니다.Choosing HTTPS transport backendHTTP 연결 옵션을 선택하고 Next 합니다.✅ Use the OpenSSL library : OpenSSL 라이브러리를 사용합니다. ca-bundle.crt 파일을 검증합니다.Use the native Windows Secure Channel library : Windows 인증서 저장소를 사용하여 검증합니다. 이 옵션은 Activce Directory 도메인 서비스를 통한 회사의 내부 Root CA 인증서를 사용할 수 있습니다.Configuring the line ending conversionsGit 저장소에 체크인/아웃할 때의 줄 바꿈 방법을 선택하고 Next 합니다. 윈도우와 유닉스의 개행 표기가 서로 다릅니다.(윈도우: \\r\\n 유닉스:\\n) 따라서 여러 운영체제에서 작업할 경우, 개행 표기가 달라져 수정 사항이 없음에도 수정된 것으로 인식할 가능성이 있습니다. 이를 해결하기 위한 옵션입니다. ✅ Checkout Windows-style, commit Unix-style line endings : 체크아웃은 윈도우 스타일, 커밋은 유닉스 스타일로 자동 변경되도록 설정합니다. Checkout as-is, commit Unix-style line endings : 체크아웃은 변경 없이, 커밋은 유닉스 스타일로 설정합니다. Checkout as-is, commit as-is : 체크아웃, 커밋 모두 스타일 변경 없이 진행합니다. Configuring the terminal emulator to use with Git BashGit Bash 터미널 에뮬레이터를 선택하고 Next 합니다.✅ Use MinTTY (the default terminal of MSYS2) : Git Bash 기본 터미널 에뮬레이터(MinTTY)를 사용합니다.Use Windows’ default console window : 윈도우 기본 콘솔(cmd)을 사용합니다.Choose the default behavior of ‘git pull’‘git pull’ 명령어에 수행될 작업을 선택하고 Next 합니다.✅ Default (fase-forward or merge) : ‘git pull’의 수행 동작을 기본으로 설정합니다.Rebase : ‘git pull’의 수행 동작으로 현재 분기를 불러온 분기를 재배치합니다.Only ever fase-forward : ‘git pull’의 수행 동작으로 불러온 분기로 빠르게 넘어갑니다. 명령어 수행에 실패할 가능성이 있습니다.Choose a credential helper자격 증명 도우미를 선택하고 Next를 눌러줍니다.✅Git Credential Manager Core : Git의 자격 증명 도우미를 사용합니다.None : 자격 증명 도우미를 사용하지 않습니다.Configuring extra options기타 옵션을 선택하고 Next 눌러줍니다.✅ Enable file system cashing : 파일 시스템 캐싱을 활성화하며 상당한 성능 향상을 제공합니다.Enable symbolic links : 심볼릭 링크를 활성화합니다. (seVreateSymbolicLink 권한이 필요합니다.) 기존 레포지토리에는 이 설정이 적용되지 않습니다.Configuring experimental options실험적 기능 사용 여부를 선택하고 Install을 눌러줍니다.(말 그대로 실험적 기능, 개발중인 기능들입니다. Git에 익숙하지 않다면 선택하지 않는 것을 권장합니다.)Enable experimental support for pseudo consoles : winpty를 사용하지 않고 Git Bash에서 Node나 Python과 같은 콘솔을 실행할 수 있게 합니다. 그러나 몇 가지 버그가 있습니다.Enable experimental built-in file system monitor : ‘git status’ , ‘git commit’ 등과 같은 명령어 실행 속도를 높이기 위해 built-in file system monitor를 자동으로 실행합니다.Completing the Git Setup WizardFinish를 눌러 설치를 완료합니다." }, { "title": "Spring Legacy Project 생성 오류", "url": "/posts/STS4-Legacy-Project-Error/", "categories": "Debugging", "tags": "setting", "date": "2022-03-10 11:31:00 +0900", "snippet": "STS4에서 Spring Legacy Project를 생성할 때an error has occurred. see error log for more details. java.lang.exceptionininitializererror이런 오류 문구가 뜬다면 이 포스팅을 참고하시기 바랍니다. 환경 Spring Tool Suite 4 Window11 / 64bit 운영체제 New &gt; Other로 들어가 Spring Legacy Project를 생성합니다.Project name을 쓰고 Templates은 Spring MVC Project를 선택 후 생성하려고 하면 다음과 같은 팝업창이 뜹니다. 라이브러리를 받겠다는 뜻이므로 Yes를 누릅니다.다음의 오류창이 떴습니다.검색을 해보니 Spring Legacy Project는 아직 JDK17을 지원하지 않는데, Spring 자체에서는 JDK17을 지원해서 이런 문제가 발생한 것 같습니다.spring 공식 홈페이지에도 ‘Java 17 지원 가능’을 확인할 수 있습니다.기존 JDK17을 지우고 JDK11을 재설치 했습니다. (JDK를 재설치 시 환경변수 설정도 다시 해주어야 합니다.)그 다음 STS4 설치 경로에서 SpringToolSuite4.ini 파일을 들어갑니다.- vmplugins/org.eclipse.justj.openjdk.hotspot.jre.full.win32.x86_64_17.0.1.v20211116-1657/jre/bin밑에- vmC:\\DevProgram\\Java\\bin\\javaw.exe이렇게 적어줍니다.다시 STS4에서 Spring Legacy Project를 생성해봅니다.문제 없이 다음 단계로 넘어갑니다.Please specify the top-level package e.g. com.mycompany.myapp*이 단계에서 com.mycompany.myapp과 같은 형식으로 적어줍니다.Spring Legacy Project가 만들어졌습니다." }, { "title": "Install DevStyle", "url": "/posts/Install-DevStyle/", "categories": "WindowOS, STS4", "tags": "setting", "date": "2022-03-10 11:31:00 +0900", "snippet": "STS4에서 DevStyle 설치 방법입니다. 환경 Spring Tool Suite 4 Window11 / 64bit 운영체제 Help &gt; MarketplaceDevStyle 검색 &gt; InstallDevStyle - Icon Designer 체크 &gt; ConfirmLicenses 동의 &gt; FinishRestart" }, { "title": "Java ORM Plugin 수동 설치", "url": "/posts/JavaORMPlugin/", "categories": "WindowOS, STS4", "tags": "setting", "date": "2022-03-10 01:49:00 +0900", "snippet": "Java ORM Plugin을 설치하려고 하는데 아래와 같은 어려움을 겪고 계신가요? Eclipse MarketPlace에 ‘java orm plugin’ 을 검색하면 나오지 않습니다. https://marketplace.eclipse.org/search/site/orm 으로 접속해서 ‘orm’을 검색합니다. 맨 위에 보라색 마크가 Java ORM Plugin인데, Eclipse에 드래그해서 install 하라고 되어 있지만 드래그해보면 아무일도 일어나지 않습니다.저 역시 구글링을 통해 여러 블로그들을 돌아다니며 이것저것 시도해보았으나 여러 번 실패를 했고, 결국 저만의 수동설치 노하우가 생겨 블로그에 기록해봅니다.(아무래도 Java ORM Plugin이 더 이상 서비스를 안 하는 것 같습니다. 방법은 수동설치뿐입니다.)STS4에서 Java ORM Plugin 수동설치 방법입니다. 환경 Spring Tool Suite 4 JavaORMPlugin_1.0.0.201411180016 Window11 / 64bit 운영체제 https://sourceforge.net/ 에 들어가 ‘java orm plugin’을 검색합니다. 다운로드 합니다. (약 5초정도 걸립니다.) C 드라이브에 다운받은 zip파일을 풀어줍니다. 풀어준 후 JavaORMPlugin 폴더에 들어갑니다. features 폴더로 들어가 안에 있는 파일 이름을 복사합니다.(f2 누르고 Ctrl+C) 다시 전으로 돌아와서 features 폴더명을 방금 복사한 파일명으로 바꿔줍니다. 그 다음, STS4 설치 경로로 들어가면 그곳에도 features라는 폴더가 있습니다. (저 같은경우 C드라이브 &gt; STS4 &gt; sts-4.13.1.RELEASE&gt; features 로 들어갑니다.) ORM 폴더에서 방금 이름을 바꿔준 features를 STS4에 있는 features로 옮겨줍니다. ORM 폴더에 plugins로 들어가면 JavaORMPlugin_1.0.0.201411180016.jar 파일이 있습니다. 그리고 다시 전으로 돌아오면 artifacts, content 라는 jar파일도 있습니다. 9번,10번에 언급한 모든 jar파일을 STS4 설치 경로에 있는 plugins 폴더에 옮겨줍니다.(저 같은경우 C드라이브 &gt; STS4 &gt; sts-4.13.1.RELEASE &gt; plugins 로 들어갑니다.) STS4 설치 경로에 configuration 폴더로 들어갑니다. org.eclipse.equinox.simpleconfigurator 라는 파일을 찾아서 들어갑니다. 그곳에 bundles.info 라는 파일을 VS Code로 열어줍니다. VS code가 없다면 설치합니다. #encoding=UTF-8 #version=1 밑에1.0.0.201411180016,plugins/me.karthy.plugin.java.orm.feature_1.0.0.201411180016.jar,4,false 이렇게 적어주고 저장합니다. STS4 를 실행하고 Window &gt; Show View 에서 plug-ins를 Open합니다. 하단에 JavaORMPlugin이 추가 되어있으면 성공입니다. (저렇게 뜨면 무조건 성공입니다.) 10분~20분 뒤에 Ctrl+N 눌러서 Java ORM Plugin이 추가됐는지 확인합니다. (반영되는게 느리기 때문에 조금 기다렸다가 확인하는게 좋습니다.) " }, { "title": "STS4에서 DataBase 연결", "url": "/posts/Connect-DataBase/", "categories": "WindowOS, STS4", "tags": "setting", "date": "2022-03-10 00:26:00 +0900", "snippet": "STS4에서 DataBase 연결하는 방법입니다. 환경 Spring Tool Suite 4 Oracle DataBase21C ojdbc 11 Window11 / 64bit 운영체제 Window &gt; Show View 에서 Data Source Explorer를 OpenDatabase Connections 우클릭 &gt; NewOracle 선택 후 Next오른쪽 상단 New Driver Definition ⊕아이콘 클릭Name/Type 탭에서 Oracle Thin Driver | Oracle | 11 을 선택JAR List 탭에서 원래 추가되어 있던 ojdbc 파일을 removeAdd JAR &gt; ojdbc 설치 경로로 들어가서 ojdbc11 선택Properties탭 확인 후 OK 클릭SID : orcl / Host : localhost / User name: 계정 아이디 / Password: 계정 비밀번호 입력 후 Test Connection 클릭Ping succeeded!가 뜨면 Connect 성공Next &gt; Finish 후 다음과 같이 ‘New Oracle’이 추가되어있으면 성공" }, { "title": "Oracle DataBase 21C 계정 생성", "url": "/posts/Oracle-Account/", "categories": "WindowOS, Oracle", "tags": "setting", "date": "2022-03-09 11:09:00 +0900", "snippet": "Oracle DataBase 21C 계정 생성하는 방법입니다. 환경 Oracle DataBase 21C Window11 / 64bit 운영체제 cmd를 실행 후 sqlplus를 입력합니다. sqlplus 사용자명 입력란에 system 을 적고, 비밀번호 입력란에 Oracle 설치 시 설정했던 비밀번호를 입력합니다. (입력할 때 안 보이는 게 정상입니다.) 사용자명 입력 : system 비밀번호 입력 : Oracle 설치할 때 설정했던 비밀번호 그 다음 conn/as sysdba 라고 입력합니다. conn/as sysdba Oracle 11g 에서는 바로 계정을 생성해도 되지만, Oracle 21C 부터는 계정을 생성하기 전에 alter session set “_ORACLE_SCRIPT”=true; 를 입력해야합니다. (이걸 적지 않으면 계정을 생성할 때 아이디 앞에 C##을 적어줘야 합니다.) alter session set “_ORACLE_SCRIPT”=true; 계정을 생성합니다. create user 아이디 identified by 비밀번호; 권한을 부여합니다. grant connect, resource, dba to 아이디; commit 합니다. commit; " }, { "title": "Install OJDBC 11", "url": "/posts/Install-OJDBC11/", "categories": "WindowOS, Oracle", "tags": "setting", "date": "2022-03-09 11:09:00 +0900", "snippet": "Window에서 OJDBC 11 설치 방법입니다. 환경 ojdbc 11 Window11 / 64bit 운영체제 Google에 OJDBC를 검색합니다. 스크롤을 내려서 JDBC 다운로드를 클릭합니다. 저는 JDK11~17까지 지원해주는 ojdbc 11 을 다운하겠습니다. 다운한 zip파일을 C 드라이브에 풀어줍니다. ojdbc11-full 이라는 폴더가 생기면 설치 성공입니다. " }, { "title": "Install Oracle DataBase 21C", "url": "/posts/Install-Oracle/", "categories": "WindowOS, Oracle", "tags": "setting", "date": "2022-03-09 10:10:00 +0900", "snippet": "Window에서 Oracle DataBase 21C 설치 방법입니다. 환경 Oracle DataBase 21C Window11 / 64bit 운영체제 Google에 Oracle Database를 검색합니다. 스크롤을 내려 Oracle Database 21C 에서 Microsoft Windows x64 (64 bit)를 다운합니다. 저는 C 드라이브에 미리 Oracle이라는 폴더와 OracleDB라는 폴더를 만들어두었습니다. Oracle 폴더에 다운받은 WINDOWS.X64_213000_db_home.zip 을 풀어줍니다. setup이라는 빨간색 아이콘을 눌러 설치를 진행합니다. 단일 인스턴스 데이터베이스 생성 및 구성 선택 후 다음을 클릭합니다. 데스크톱 클래스 선택 후 다음을 클릭합니다. 가상 계정 사용 선택 후 다음을 클릭합니다. Oracle 기본 위치에서 찾아보기를 눌러서 OracleDB를 선택 후 비밀번호를 설정하고 다음을 클릭합니다. 저는 비밀번호를 숫자4자리로 했기 때문에 다음과 같은 경고문이 뜨는데 무시하고 “예” 눌러줍니다. (이때 공간이 부족하다는 경고문이 같이 뜰 수도 있는데, 그럴땐 켜져있는 프로그램이 없는지 살펴보고 다 꺼준 후 진행해봅니다.) 설치를 클릭합니다. 설치는 시간이 꽤 걸리니 느긋한 마음으로 기다려줍니다. 이 화면이 뜨면 설치 완료입니다. " }, { "title": "STS4에서 Apache Tomcat 연동", "url": "/posts/STS4-Apache-Tomcat-Connect/", "categories": "WindowOS, STS4", "tags": "setting", "date": "2022-03-09 07:34:00 +0900", "snippet": "STS4에서 Apache Tomcat 연동하는 방법입니다. 저는 현재 JDK11로 바꾼 상태이지만 과정은 똑같으니 참고부탁드립니다. 환경 Spring Tool Suite 4 Apache Tomcat Version 10.0.16 JAVA_VERSION=”17.0.2” Window11 / 64bit 운영체제 Window &gt; Show View에서 Servers를 Open합니다. No servers are available. click this link to create a new server... 문구를 클릭합니다. New Server창에서 Apache를 선택하고 Tomcat v10.0 Server를 선택 후 Next합니다. Browse를 클릭하고 Apache Tomcat 설치 경로로 들어가 apache-tomcat-10.0.16를 선택합니다. Installed JREs에서 Add를 누른 후 Standard VM를 선택 후 Next 합니다. Directory에서 JDK 설치 경로로(bin 직전까지) 들어가 폴더 선택 후 Finish 합니다. 방금 추가한 JDK를 체크하고 Apply and Close 합니다. JRE: 에서 방금 추가한 JDK를 선택 후 Finish 합니다. 이런 화면이 되면 성공입니다. " }, { "title": "Install Apache Tomcat", "url": "/posts/Install-Apache-Tomcat/", "categories": "WindowOS, Apache Tomcat", "tags": "setting", "date": "2022-03-08 00:42:00 +0900", "snippet": "Window에서 Apache Tomcat 10.0.16 설치 방법입니다. 환경 Apache Tomcat Version 10.0.16 Window11 / 64bit 운영체제 Google에 Apache Tomcat을 검색합니다. 제일 위에 있는 사이트로 들어갑니다. 좌측 바에 Which version? 을 클릭합니다. Which version?에서는 JDK 버전에 따라 지원하는 Apache Tomcat 버전을 확인할 수 있습니다. 저는 JDK8 버전 이상을 지원하는 Apache Tomcat 10.0 버전을 다운할 예정입니다. 좌측 바에 Tomcat 10을 클릭합니다. 스크롤을 조금 내려서 10.0.16에 해당하는 64-bit Windows zip을 다운합니다. 다운한 파일을 C 드라이브에 풀어줍니다. 그럼 다음과 같이 apache-tomcat-10.0.16 폴더가 생기면 설치 완료입니다. " }, { "title": "Other Environment Setting", "url": "/posts/STS4-Other-Environment-Setting/", "categories": "WindowOS, STS4", "tags": "setting", "date": "2022-03-07 09:45:00 +0900", "snippet": "Spring Legacy Project를 생성하고 준비가 끝났다고 생각했지만, 기존에 사용했던 Data Source Explorer 탭이나 HTML, CSS, SQL File도 없는 것을 확인했습니다.STS4에서 Data Source Explorer 및 HTML, CSS, SQL File 생성 방법입니다. 환경 Spring Tool Suite 4 Version: 4.13.1.RELEASE Window11 / 64bit 운영체제 Help &gt; Install New Software로 들어갑니다. Latest Eclipse Release - https://download.eclipse.org/releases/photon을 적어줍니다. Database Development와 Web, XML, Java EE and OSGi Enterprise Development를 체크하고 Next 합니다. Install Details 창이 뜨면 그대로 Next 합니다. 라이센스 동의 후, Finish 합니다. 다운 중, Trust 창이 뜨면 Select All을 누르고 Trust selected 합니다. Restart 창이 뜨면 Restart Now를 클릭합니다. 다시 Window &gt; Show View 에서 ‘data’를 검색하면 Data Source Explorer가 생겼습니다. 나중에 쓸 예정이므로 Open 해줍니다. Servers도 나중에 Tomcat이 설치되면 사용할 예정이므로 미리 Open 해줍니다. Window &gt; Preferences 에서 HTML Files, CSS Files, JSP Files, XML Files, Workspace를 UTF-8로 설정해줍니다. 여기까지 왔다면, STS4에서 Spring Legacy Project를 할 준비가 다 된겁니다. " }, { "title": "Spring Legacy Project 생성", "url": "/posts/STS4-Legacy-Project/", "categories": "WindowOS, STS4", "tags": "setting", "date": "2022-03-07 01:27:00 +0900", "snippet": "STS4를 설치하면 Spring Legacy Project가 없습니다.기존 Eclipse 버전(Eclipse Photon version)에서 Spring Legacy Project를 계속 사용해왔던지라 많이 당황했습니다.STS4에서 Spring Legacy Project를 생성하는 방법은 다음과 같습니다. 환경 Spring Tool Suite 4 Version: 4.13.1.RELEASE Window11 / 64bit 운영체제 STS4 설치 후, Ctrl+N 을 누르고 ‘spring’을 검색해보면 Spring Legacy Project가 없습니다. Help &gt; Eclipse Marketplace 로 들어갑니다. ‘sts’ 를 검색하고, Spring Tools 3 Add-On for Spring Tools 4 3.9.21.RELEASE 를 Install합니다. 전부 체크되어 있는지 확인 후, Confirm 합니다. 라이센스 동의 후, Finish 합니다. 우측 하단 구석에 다운되고 있는 모습을 확인할 수 있습니다. (기다리면 Restart 팝업창이 뜹니다.) Restart 후, 전에 없던 Dashboard가 생겼습니다. 다시 Ctrl+N 을 눌러서 ‘spring’을 검색해보면 Spring Legacy Project가 생겼습니다. " }, { "title": "Install STS4", "url": "/posts/Install-STS4/", "categories": "WindowOS, STS4", "tags": "setting", "date": "2022-03-06 11:34:00 +0900", "snippet": "Window에서 STS4 설치 방법입니다. 환경 Spring Tool Suite 4 Version: 4.13.1.RELEASE Window11 / 64bit 운영체제 Google에 STS4를 검색합니다. Tools - Spring을 클릭합니다. 스크롤을 조금 내려서 4.13.1 - WINDOWS X86_64를 다운합니다. C 드라이브에 미리 STS4 폴더를 만들어놓습니다. 다운로드 파일을 STS4 폴더에 풀어줍니다. 그 다음 contents를 풀어줍니다. 그럼 다음과 같이 sts-4.13.1.RELEASE라는 파일이 생깁니다. sts-4.13.1.RELEASE를 더블 클릭 후, SpringToolSuite4.exe를 작업표시줄에 고정합니다. SpringToolSuite4.exe를 실행하면 다음과 같은 창이 뜹니다. 다음 창이 뜨면, 본인이 작업할 Workspace 경로를 설정하고 Launch 합니다. STS4가 정상적으로 열린 모습입니다. " }, { "title": "PathSetting JDK", "url": "/posts/PathSetting-JDK/", "categories": "WindowOS, JDK", "tags": "setting", "date": "2022-03-06 10:26:00 +0900", "snippet": "Window에서 JDK 설치 후, 환경변수 설정하는 방법입니다. 환경 JAVA_VERSION=”17.0.2” JAVA_VERSION_DATE=”2022-01-18” LIBC=”default” OS_ARCH=”x86_64” OS_NAME=”Windows” Window key + r key 를 누르고, 실행창에서 sysdm.cpl을 검색합니다. 고급 탭에서 환경 변수를 클릭합니다. 하단의 시스템 변수 에서 새로 만들기를 클릭합니다. 변수 이름을 JAVA_HOME 으로 하고, 변수 값은 본인 JDK 설치 경로로 설정합니다. 그 다음 Path 으로 들어갑니다. 새로 만들기를 클릭합니다. %JAVA_HOME%\\bin 을 적어줍니다. 위로 이동을 눌러서 맨 위로 올려줍니다. 그 다음 확인을 눌러줍니다. cmd창에서 다음과 같이 차례로 입력해줍니다. path를 입력했을 때 경로를 살펴보면 맨 앞으로 온 jdk 경로를 확인할 수 있습니다. " }, { "title": "Install JDK", "url": "/posts/Install-JDK/", "categories": "WindowOS, JDK", "tags": "setting", "date": "2022-03-06 09:49:00 +0900", "snippet": "Window에서 JDK17을 설치하는 방법입니다. 저는 현재 JDK11을 사용하고 있으나, 설치 방법은 동일하니 참고해주시기 바랍니다. 환경 JAVA_VERSION=”17.0.2” JAVA_VERSION_DATE=”2022-01-18” LIBC=”default” OS_ARCH=”x86_64” OS_NAME=”Windows” Google에서 JDK17을 검색합니다. 제일 위에 있는 사이트에 들어갑니다. 이 사이트의 쿠키에 대하여라는 팝업창이 뜨면 ‘모두 승인’을 클릭합니다. 그 다음 화면에서 스크롤을 조금 내려줍니다. Windows x64 Installer를 다운해줍니다. (각자의 환경에 맞게 다운합니다.) 설치를 진행합니다. 설치가 완료되면, cmd 창을 열어 javac -version을 입력했을 때 버전명이 잘 나오면 잘 설치된 겁니다. " } ]
